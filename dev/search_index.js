var documenterSearchIndex = {"docs":
[{"location":"apiref/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"apiref/#Types","page":"API Reference","title":"Types","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"apiref/#Functions","page":"API Reference","title":"Functions","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"details/iaca/#Incomplete-Adaptive-Cross-Approximation","page":"iACA","title":"Incomplete Adaptive Cross Approximation","text":"","category":"section"},{"location":"details/iaca/#Geometrical-Pivoting-Strategy","page":"iACA","title":"Geometrical Pivoting Strategy","text":"","category":"section"},{"location":"details/iaca/#Brute-Force-Approach","page":"iACA","title":"Brute Force Approach","text":"","category":"section"},{"location":"details/iaca/#Tree-Based-Approach","page":"iACA","title":"Tree Based Approach","text":"","category":"section"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"In order to contribute to this package directly create a pull request against the main branch. Before doing so please: ","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Follow the style of the surrounding code.\nSupplement the documentation.\nWrite tests and check that no errors occur.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Style","page":"Contributing","title":"Style","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For a consistent style the JuliaFormatter.jl package is used which enforces the style defined in the .JuliaFormatter.toml file. To follow this style simply run","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using JuliaFormatter\nformat(pkgdir(AdaptiveCrossApproximation))","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"note: Note\nThat all files follow the JuliaFormatter style is tested during the unit tests. Hence, do not forget to execute the two lines above. Otherwise, the tests are likely to not pass.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#Documentation","page":"Contributing","title":"Documentation","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Add documentation for any changes or new features following the style of the existing documentation. For more information you can have a look at the Documenter.jl documentation.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"","category":"page"},{"location":"contributing/#tests","page":"Contributing","title":"Tests","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Write tests for your code changes and verify that no errors occur, e.g., by running","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.test(\"AdaptiveCrossApproximation.jl\")","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For a detailed information on which parts are tested the coverage can be evaluated on your local machine, e.g., by","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"using Pkg\nPkg.test(\"AdaptiveCrossApproximation\"; coverage=true, julia_args=[\"-t 4\"])\n\n# determine coverage\nusing Coverage\nsrc_folder = pkgdir(AdaptiveCrossApproximation) * \"/src\"\ncoverage   = process_folder(src_folder)\nLCOV.writefile(\"path-to-folder-you-like\" * \"AdaptiveCrossApproximation.lcov.info\", coverage)\n\nclean_folder(src_folder) # delete .cov files\n\n# extract information about coverage\ncovered_lines, total_lines = get_summary(coverage)\n@info \"Current coverage:\\n$covered_lines of $total_lines lines ($(round(Int, covered_lines / total_lines * 100)) %)\"","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"In Visual Studio Code the Coverage Gutters plugin can be used to visualize the tested lines of the code by inserting the path of the AdaptiveCrossApproximation.lcov.info file in the settings.","category":"page"},{"location":"details/aca/#Adaptive-Cross-Approximation","page":"ACA","title":"Adaptive Cross Approximation","text":"","category":"section"},{"location":"details/aca/#Pivoting-Strategies","page":"ACA","title":"Pivoting Strategies","text":"","category":"section"},{"location":"details/aca/#Convergence-Criteria","page":"ACA","title":"Convergence Criteria","text":"","category":"section"},{"location":"#AdaptiveCrossApproximation","page":"Introduction","title":"AdaptiveCrossApproximation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package provides different flavors of the adaptive cross approximation introduced in BEBENDORF. Beside the standard algorithm this package allows to use several different pivoting strategies [] and convergence criteria[]. Further more this package contains an incomplete adaptive cross approximation allowing an efficient pivoting selection for the construction of mathcalH^2-matrices [].","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Installing AdaptiveCrossApproximation is done by entering the package manager (enter ] at the julia REPL) and issuing:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"pkg> add https://github.com/FastBEAST/AdaptiveCrossApproximation.jl.git","category":"page"},{"location":"#refs","page":"Introduction","title":"References","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The implementation is based on","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"[2] Bauer, M., M. Bebendorf, and B. Feist. “Kernel-Independent Adaptive Construction of mathcal H^2-Matrix Approximations.” Numerische Mathematik 150, no. 1 (January 2022): 1–32. https://doi.org/10.1007/s00211-021-01255-y.\n[3] Heldring, Alexander, Eduard Ubeda, and Juan M. Rius. “Improving the Accuracy of the Adaptive Cross Approximation with a Convergence Criterion Based on Random Sampling.” IEEE Transactions on Antennas and Propagation 69, no. 1 (January 2021): 347–55. https://doi.org/10.1109/TAP.2020.3010857.\n[4] Tetzner, Joshua M., and Simon B. Adrian. “On the Adaptive Cross Approximation for the Magnetic Field Integral Equation.” Preprint. Preprints, January 26, 2024. https://doi.org/10.36227/techrxiv.170630205.56494379/v1.","category":"page"}]
}
